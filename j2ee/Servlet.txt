1.Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或
其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。
使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。

2.Servlet 执行以下主要任务：
(1)读取客户端（浏览器）发送的显式的数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。
(2)读取客户端（浏览器）发送的隐式的 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。
(3)处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。
(4)发送显式的数据（即文档）到客户端（浏览器）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、
二进制文件（GIF 图像）、Excel 等。
(5)发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），
设置 cookies 和缓存参数，以及其他类似的任务。

3.创建Servlet的三种方式。
(1)实现 Servlet 接口,因为是实现 Servlet 接口，所以我们需要实现接口里的方法。
//Servlet的生命周期:从Servlet被创建到Servlet被销毁的过程
//一次创建，到处服务
//一个Servlet只会有一个对象，服务所有的请求
/*
 * 1.实例化（使用构造方法创建对象）
 * 2.初始化  执行init方法
 * 3.服务     执行service方法
 * 4.销毁    执行destroy方法
   最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。
 */

public class ServletDemo1 implements Servlet {

    //public ServletDemo1(){}
	Servlet 创建于用户第一次调用对应于该 Servlet 的 URL 时，但是也可以指定 Servlet 在服务器第一次启动时被加载。
	当用户调用一个 Servlet 时，就会创建一个 Servlet 实例，每一个用户请求都会产生一个新的线程，适当的时候移交给 doGet 或 doPost 方法。
	init() 方法简单地创建或加载一些数据，这些数据将被用于 Servlet 的整个生命周期。

     //生命周期方法:当Servlet第一次被创建对象时执行该方法,该方法在整个生命周期中只执行一次
    public void init(ServletConfig arg0) throws ServletException {
                System.out.println("=======init=========");
        }

    //生命周期方法:对客户端响应的方法,该方法会被执行多次，每次请求该servlet都会执行该方法
	service() 方法是执行实际任务的主要方法。Servlet 容器（即 Web 服务器）调用 service() 方法来处理来自客户端（浏览器）的请求，
	并把格式化的响应写回给客户端。
	每次服务器接收到一个 Servlet 请求时，服务器会产生一个新的线程并调用服务。service() 方法检查 HTTP 请求类型（GET、POST、PUT、DELETE 等），
	并在适当的时候调用 doGet、doPost、doPut，doDelete 等方法。
	Servlet 容器处理由多个线程产生的多个请求，每个线程执行一个单一的 Servlet 实例的 service() 方法。

    public void service(ServletRequest arg0, ServletResponse arg1)
            throws ServletException, IOException {
        System.out.println("hehe");

    }

    //生命周期方法:当Servlet被销毁时执行该方法
	destroy() 方法可以让您的 Servlet 关闭数据库连接、停止后台线程、把 Cookie 列表或点击计数器写入到磁盘，并执行其他类似的清理活动。
	在调用 destroy() 方法之后，servlet 对象被标记为垃圾回收。
    public void destroy() {
        System.out.println("******destroy**********");
    }
//当停止tomcat时也就销毁的servlet。
    public ServletConfig getServletConfig() {

        return null;
    }

    public String getServletInfo() {

        return null;
    }
}

(2)继承 GenericServlet 类
它实现了 Servlet 接口除了 service 的方法，不过这种方法我们极少用。
public class ServletDemo2 extends GenericServlet {

    @Override
    public void service(ServletRequest arg0, ServletResponse arg1)
            throws ServletException, IOException {
        System.out.println("heihei");

    }
}

(3)继承 HttpServlet 方法(常用)
public class ServletDemo3 extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        System.out.println("haha");
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        System.out.println("ee");
        doGet(req,resp);
    }

}

4.设置 Web 服务器：Tomcat
(1)下载和安装
到apache官网：www.apache.org下载压缩版
启动：双击%tomcat%/bin/startup.bat，打开浏览器输入http://localhost:8080会看到tomcat主页
关闭：双击%tomcat%/bin/shutdown.bat

(2)端口占用错误
tomcat启动所需的端口被其他软件占用了，修改tomcat软件所需端口，在%tomcat%/conf/server.xml文件中

(3)url
http://localhost:8081默认访问的是webapps文件,webapps目录： tomcat共享目录。需要共享的本地资源放到此目录中。

(4)Tomcat的目录结构
bin: 存放tomcat的命令。
conf: 存放tomcat的配置信息。其中server.xml文件是核心的配置文件。
lib：支持tomcat软件运行的jar包。其中还有技术支持包，如servlet，jsp
logs：运行过程的日志信息
temp: 临时目录
webapps： 共享资源目录。web应用目录。（注意不能以单独的文件进行共享）
work： tomcat的运行目录。jsp运行时产生的临时文件就存放在这里

(5)Web应用的目录结构
WebRoot :  web应用的根目录
	静态资源（html+css+js+image+vedio）
	WEB-INF ： 固定写法	
		classes： （可选）固定写法。存放class字节码文件
		lib： （可选）固定写法。存放jar包文件。
		web.xml
注意：
1）WEB-INF目录里面的资源不能通过浏览器直接访问
2）如果希望访问到WEB-INF里面的资源，就必须把资源配置到一个叫web.xml的文件中。

(6)静态资源和动态资源的区别
静态资源： 当用户多次访问这个资源，资源的源代码永远不会改变的资源。
动态资源：当用户多次访问这个资源，资源的源代码可能会发生改变。

(7)第一个servlet程序
public class HelloServlet extends HttpServlet{
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		//解决中文乱码问题
		resp.setContentType("text/html;charset=utf-8");
		//向浏览器输出内容
		resp.getWriter().write("这是第一个servlet程序。当前时间为："+new Date());
	}
}
在当前web应用下的web.xml文件配置Servlet
<!-- 配置一个servlet程序 -->
	<servlet>
		<!-- servlet的内部名称 ，可以自定义-->
		<servlet-name>HelloServlet</servlet-name>
		<!-- servlet类名： 包名+简单类名-->
		<servlet-class>gz.itcast.d_servlet.HelloServlet</servlet-class>
	</servlet>

	<servlet-mapping>
		<!-- servlet的内部名称，和上面的名称保持一致！！！-->
		<servlet-name>HelloServlet</servlet-name>
		<!-- servlet的访问名称： /名称 -->
		<url-pattern>/hello</url-pattern>
	</servlet-mapping>
启动tomcat服务器，运行访问
访问servlet:  http://localhost:8080/myweb/ hello

(8)Servlet技术： 
用java语言开发动态资源的技术
	开发一个Servlet程序的步骤：
		1）创建一个java类，继承HttpServlet类
		2）重写HttpServlet类的doGet方法
		3）把写好的servlet程序交给tomcat服务器运行！！！！
			3.1 把编译好的servlet的class文件拷贝到tomcat的一个web应用中。（web应用的WEB-INF/classes目录下）		
			3.2 在当前web应用的web.xml文件中配置servlet
				<!-- servlet配置 -->
				<servlet>
				<servlet-name>HelloServlet</servlet-name>
				<servlet-class>gz.itcast.HelloServlet</servlet-class>
				</servlet>
				<!--  servlet的映射配置 -->
				<servlet-mapping>
				<servlet-name> HelloServlet </servlet-name>
				<url-pattern>/hello</url-pattern>
				</servlet-mapping>
		4）访问servlet
				http://localhost:8080/myweb/hello


















package wangyi.test;

/*
*问题：
*小Q得到一个神奇的数列: 1, 12, 123,...12345678910,1234567891011...。
并且小Q对于能否被3整除这个性质很感兴趣。
小Q现在希望你能帮他计算一下从数列的第l个到第r个(包含端点)有多少个数可以被3整除。

输入描述:

输入包括两个整数l和r(1 <= l <= r <= 1e9), 表示要求解的区间两端。
输出描述:

输出一个整数, 表示区间内能被3整除的数字个数。
输入例子1:

2 5
输出例子1:

3
例子说明1:

12, 123, 1234, 12345...
其中12, 123, 12345能被3整除。

内容扩展：
【规律】
1．个位数是偶数（0，2，4，6，8）的数能被2整除；
2．个位数是0或5的数能被5整除；
3．末两位数能被4(或25)整除的数能被4(或25)整除；
4．末三位数能被8(或125)整除的数能被8(或125)整除；
5．能被6整除的数只需满足能被2,3整除.
6．各位数字之和能被3(或9)整除的数能被3(或9)整除；
7．奇数位数字之和与偶数位数字之和的差能被11整除的数能被11整除；
8．末三位数字所表示的数与末三位以前的数字所表示的数的差(大数减小数) 能被7(或11或13)整除的数能被7(或11或13)整除
* */

import java.util.Scanner;

public class Main1 {
    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        int l = in.nextInt();
        int r = in.nextInt();
        int sum = 0;
        int count = 0;
        for(int i=l;i<=r;i++){
            for(int j=i;j>0;j--){
                sum+=j;
            }
            if (sum % 3 ==0){
                count++;
            }
            sum=0;
        }

        System.out.println(count);
    }
}
